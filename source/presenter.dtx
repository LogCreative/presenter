% \iffalse meta-comment
% ------------------------------------------------------------------------
% Copyright (C) 2023 Log Creative <logcreative@outlook.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Log Creative.
% ------------------------------------------------------------------------
% \fi
%
% \begin{implementation}
%
% \iffalse
%<*class|package>
\NeedsTeXFormat{LaTeX2e}[2020/10/01]
%<class>\ProvidesExplClass
%<package>\ProvidesExplPackage
  {presenter}
  {2023-07-07}{0.5.0}
%<class>  {A LaTeX presentation framework with seamless migration (class)}
%<package>  {A LaTeX presentation framework with seamless migration (package)}
%</class|package>
% \fi
%
% \iffalse
%<*class>
% \fi
%
% \section{Presenter Class}
%
% Set the module prefix for the document class. The module is not named in
% \verb"pre" to avoid the potential conflictions with other classes/packages.
%    \begin{macrocode}
%<@@=pretcls>
%    \end{macrocode}
%
% \begin{variable}[int]{\g_@@_article_bool}
% Base class boolean variable if it is \cls{article} base class.
%    \begin{macrocode}
\bool_new:N \g_@@_article_bool
\bool_gset_true:N \g_@@_article_bool
%    \end{macrocode}
% \end{variable}
%
% Declare option \verb"report" and \verb"article" for selecting respective base
% classes.
%    \begin{macrocode}
\DeclareOption { article } { \bool_gset_true:N  \g_@@_article_bool }
\DeclareOption { report  } { \bool_gset_false:N \g_@@_article_bool }
%    \end{macrocode}
%
% Pass other options to both the potential document classes.
%    \begin{macrocode}
\DeclareOption* {
  \PassOptionsToClass { \CurrentOption } { article }
  \PassOptionsToClass { \CurrentOption } { report  }
}
%    \end{macrocode}
%
% Process the options and load the selected base class. Load the main package.
%    \begin{macrocode}
\ProcessOptions*
\LoadClass { \bool_if:NTF \g_@@_article_bool { article } { report } }
\RequirePackage { presenter }
%    \end{macrocode}
%
% \iffalse
%</class>
% \fi
%
%
% \iffalse
%<*package>
% \fi
%
% \section{Presenter Package}
%
% Set the module prefix for the package. The module is not named in \verb"pre"
% to avoid the potential conflictions with other classes/packages.
%    \begin{macrocode}
%<@@=pret>
%    \end{macrocode}
%
% When using \pkg{hyperref} package, the internal link will jump to the whole
% page (fits the page to the window), which confirms the behavior as a slide.
% TODO: It seems that \cs{AtEndOfPackage} is not available for \pkg{hyperref}.
%    \begin{macrocode}
\IfPackageLoadedTF { hyperref }
  { \hypersetup { pdfview = Fit } }
  { \PassOptionsToPackage { pdfview = Fit } { hyperref } }
%    \end{macrocode}
%
% \begin{variable}[int]{\g_@@_chapter_bool}
% Boolean variable indicate if \cls{presenter} need to patch \tn{chapter}
% command. It is decided whether there is a \tn{chapter} command.
%    \begin{macrocode}
\bool_new:N \g_@@_chapter_bool
\cs_if_exist:NTF \chapter
  { \bool_gset_true:N  \g_@@_chapter_bool }
  { \bool_gset_false:N \g_@@_chapter_bool }
%    \end{macrocode}
% \end{variable}
%
% Additional sectioning handlers are implemented in package \pkg{pretsec}.
%    \begin{macrocode}
\RequirePackage { pretsec }
%    \end{macrocode}
%
% Introduce package \pkg{geometry}.
%    \begin{macrocode}
\RequirePackage { geometry }
%    \end{macrocode}
%
% Modify the paper size to a smaller one to make the contents to be looked
% bigger, in other words, maginify the font relatively.
% The idea is inspired by the \cls{beamer} class.
%    \begin{macrocode}
\geometry{
  paperwidth  = 16 cm,
  paperheight =  9 cm,
  top         =  2 cm,
  bottom      =  2 cm,
  left        =  2 cm,
  right       =  2 cm
}
%    \end{macrocode}
%
% Load \pkg{prettpl} package for template management.
%    \begin{macrocode}
\RequirePackage { prettpl }
%    \end{macrocode}
%
% One could only load the template in the preamble.
% It is too heavy to load all the templates. Load \pkg{default} template as base.
%    \begin{macrocode}
\LoadPresenterBackground { default }
\LoadPresenterForeground { default }
%    \end{macrocode}
%
% Introduce \pkg{xpatch} for patching command by searching the query.
%    \begin{macrocode}
\RequirePackage { xpatch }
%    \end{macrocode}
%
% \begin{macro}{\maketitle}
% The default \cs{maketitle} implementation for \cls{report} has a hard-coded
% vertical skip of 60pt which will make troubles in the current page size
% configuration. Remove the vertical skip.
%
% According to the \file{source2e.dtx}, the current definition is
% protected by \env{titlepage} environment, which is hard to patch directly.
%    \begin{macrocode}
\xpatchcmd { \maketitle } { \vskip 60\p@ } { } { } { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\part}
% Patch part page here if you want to use \cls{article} as the base class.
% It is not harmful for \cls{report} base class as well, which will clear the
% page twice in equivalence to clear the page once.
% Process the part sectioning after clearing the page.
%
% The sectioning level of \tn{part} is defined as 0 initially, for document
% class like \cls{article}.
%    \begin{macrocode}
\xpretocmd { \part } {
  \clearpage
  \thispagestyle { plain }
  \UseInstance { foreground / sectioning } { base } { part } { }
} {  } {  }
\pretsec_put_name_lv:nn { part } { 0 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\chapter}
% For \cls{report} class or any other document class with \tn{chapter} command,
% unify the \tn{chapter} behavior.
%
% To unify the behavior of chapter with other alph numbered sections, no page
% style change will be made.
%
% The default \tn{chapter} (or \tn{chapter*}) implementation includes
% \tn{@makechapterhead} (or \tn{@makeschapterhead}) to format the chapter head.
% Remove the typesetting in the body.
%
% And add the information to mark for stared version \tn{@schapter}, which will
% be called by \tn{chapter*}.
%    \begin{macrocode}
\bool_if:NT \g_@@_chapter_bool
  {
    \pretsec_put_name_lv:nn { part    } { -1 }
    \pretsec_put_name_lv:nn { chapter } {  0 }
    \xpatchcmd { \chapter } { \thispagestyle{plain} } { } { } { }
    \renewcommand { \@makechapterhead  } [ 1 ] { }
    \renewcommand { \@makeschapterhead } [ 1 ] { }
    \xpretocmd { \@schapter } { \starmark{#1} } { } { }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@startsection}
% For the rest of the sectioning commands, \tn{@startsection} will be called to
% handle them. When using them, clear the page at the beginning.
%    \begin{macrocode}
\xpretocmd { \@startsection } { \clearpage } { } { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@sect}
% For the non-star version, \tn{@sect} will be called as the child command.
% Step the counter, add to contents and mark the information. No typesetting in
% the body now.
% \begin{arguments}
%   \item name
%   \item level
%   \item indent
%   \item beforeskip
%   \item afterskip
%   \item style
%   \item contents line title (optional)
%   \item display title
% \end{arguments}
%    \begin{macrocode}
\RenewDocumentCommand { \@sect } { m m m m m m O{} m } {
  \int_compare:nNnF { #2 } > { \value { secnumdepth } }
    { \refstepcounter { #1 } }
  \addcontentsline { toc } { #1 } {
    \int_compare:nNnF { #2 } > { \value { secnumdepth } }
      { \protect \numberline { \use:c { the#1 } } }
    #7
  }
  \pretsec_put_name_lv:nn { #1 } { #2 }
  \use:c { #1mark } { #8 }
}
%    \end{macrocode}
% NOTE: Since every section will create a new page, the update of using
% \cs{pretsec_put_name_lv:nn} will be consistent.
% Is it necessary, or just pass the entire content?
% TODO: do more research on this with other packages.
% \end{macro}
%
% \begin{macro}[int]{\@ssect}
% For the stared version of the sectioning command, \tn{@ssect} will be called
% as the child command. No typesetting in the body and insert the information to
% the mark.
%
% NOTICE: since there is no name or level of the sectioning in the paramenters
% of \tn{@ssect}, the current implementation will make displaying the star
% sectioning look identical despite of different levels of starred sectioning.
% \begin{arguments}
%   \item indent
%   \item beforeskip
%   \item afterskip
%   \item style
%   \item display title
% \end{arguments}
%    \begin{macrocode}
\RenewDocumentCommand { \@ssect } { m m m m m } {
  \starmark { #5 }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\printsecnum}
% Insert the printed version numbers of sectioning counter \meta{name}.
% This macro will compare the level of the \meta{name} with the counter
% \verb"secnumdepth" to determine whether to print it out.
% If it is printed out, a trailing hard space will be added.
% \begin{arguments}
%   \item name
% \end{arguments}
%    \begin{macrocode}
\int_new:N \l_@@_in_lv_int
\NewDocumentCommand { \printsecnum } { m } {
  \pretsec_get_name_lv:nN { #1 } \l_@@_in_lv_int
  \int_compare:nNnF { \l_@@_in_lv_int } > { \value { secnumdepth } }
    { \use:c { the#1 } \quad }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\ps@empty}
% There is no need to patch \verb"empty" page style.
% \end{macro}
%
% \begin{macro}[int]{\ps@plain}
% Patch the page style \verb"plain". This will use the \presenter{} footline
% instead of the default footline of centred page number.
%    \begin{macrocode}
\xapptocmd { \ps@plain }
  {
    \renewcommand { \@oddfoot } 
      { \UseInstance { foreground / footline } { base } }
  } { } { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\ps@presenterpage}
% Define the page style \verb"presenterpage".
%
% As is described in \file{ltpage.dtx}, a page style needs to define
% \tn{@oddhead}, \tn{@oddfoot} (\tn{@evenhead} and \tn{@evenfoot} if it is in
% double-sided mode, but for the current \presenter{}, only single-sided mode
% is required) to control the headline and footline, and \tn{chaptermark},
% \tn{sectionmark}, \tn{subsectionmark}, \tn{subsubsectionmark},
% \tn{paragraphmark}, \tn{subparagraphmark} for the sectioning command to
% produce marks, which will be handled by \texttt{foreground/sectioning} in
% \presenter{} and not actually marks.
%
% For more customization abilities, \presenter{} introduces \cs{starmark}
% for the starred version command. \presenter{} also make instances hook to
% \texttt{shipout/background} and \texttt{shipout/foreground} by \cs{AddToHook}
% for customizing every page, which could only be controlled by re-declaring the
% instances. Use the hook by \cs{AddToHookNext} inside \tn{@oddhead} or
% \tn{@oddfoot} command to render the background or foreground overlay on every
% next page, which could be controlled by the page style (\textit{i.e.}, if it
% in the other page style, the instance will not be rendered).
%
% The order of the rendering instances could be described as follows:
% \begin{align*}
% &\texttt{background/canvas} \rightarrow \\
% \text{\parbox{12em}{Only available in \\
% \tn{@oddhead} or \tn{@oddfoot}}}&\begin{cases}
% &\texttt{background/headline} \rightarrow \texttt{background/footline} \rightarrow \\
% &\text{Handle sectioning by }\texttt{foreground/sectioning} \rightarrow \\
% &\texttt{foreground/headline} \rightarrow \texttt{foreground/footline}
% \end{cases}\\
% &\rightarrow \texttt{foreground/canvas}
% \end{align*}
%    \begin{macrocode}
\newcommand { \ps@presenterpage } {
  \AddToHook { shipout / background } {
    \UseInstance { background / canvas } { base }
  }
  \renewcommand { \@oddhead } {
    \UseInstance { foreground / headline } { base }
    \AddToHookNext { shipout / background } {
      \UseInstance { background / headline } { base }
    }
  }
  \renewcommand { \@oddfoot } {
    \UseInstance { foreground / footline } { base }
    \AddToHookNext { shipout / background } {
      \UseInstance { background / footline } { base }
    }
  }
  \bool_if:NT \g_@@_chapter_bool
    {
      \RenewDocumentCommand { \chaptermark } { +m } {
        \UseInstance { foreground / sectioning } { base } { chapter }
          { \printsecnum { chapter } ##1 }
      }
    }
  \RenewDocumentCommand { \sectionmark } { +m }
    {
      \UseInstance { foreground / sectioning } { base } { section }
        { \printsecnum { section } ##1 }
    }
  \RenewDocumentCommand { \subsectionmark } { +m }
    {
      \UseInstance { foreground / sectioning } { base } { subsection }
        { \printsecnum { subsection } ##1 }
    }
  \RenewDocumentCommand { \subsubsectionmark } { +m }
    {
      \UseInstance { foreground / sectioning } { base } { subsubsection }
        { \printsecnum { subsubsection } ##1 }
    }
  \RenewDocumentCommand { \paragraphmark } { +m }
    {
      \UseInstance { foreground / sectioning } { base } { paragraph }
        { \printsecnum { paragraph } ##1 }
    }
  \RenewDocumentCommand { \subparagraphmark } { +m }
    {
      \UseInstance { foreground / sectioning } { base } { subparagraph }
        { \printsecnum { subparagraph } ##1 }
    }
  \ProvideDocumentCommand { \starmark } { +m }
    {
      \UseInstance { foreground / sectioning } { base } { star }
        { ##1 }
    }
  \AddToHook { shipout / foreground } {
    \UseInstance { foreground / canvas } { base }
  }
}
%    \end{macrocode}
% \end{macro}
%
% Set page style to \verb"presenterpage".
%    \begin{macrocode}
\pagestyle { presenterpage }
%    \end{macrocode}
%
% Change the default placement for defined float. This will make it try here at
% first, then try the floating page configuration.
%
% NOTE: \cs{renewcommand} in \LaTeXe{} and \cs{RenewDocumentCommand} in \LaTeX3
% are different, and don't use the latter one for time-critical work if not
% necessary, and what's worse may turn into an error (in this case).
%    \begin{macrocode}
\renewcommand { \fps@figure } { hp }
\renewcommand { \fps@table  } { hp }
%    \end{macrocode}
%
% Set the default font to serif fonts.
% This will not set the math font.
%    \begin{macrocode}
\renewcommand { \familydefault } { \sfdefault }
%    \end{macrocode}
%
% In the original definitions, \tn{@title} and \tn{@author} are defined as
% errors by default. But for the \pkg{presenter} templates this could be an
% obstacle as the information could be displayed in every page instead of only
% in \cs{maketitle}. Thus, making them as \tn{@empty} by default will make the
% template code cleaner.
%    \begin{macrocode}
\let \@title  \@empty
\let \@author \@empty
%    \end{macrocode}
%
% \iffalse
%</package>
% \fi
%
% \end{implementation}
\endinput
