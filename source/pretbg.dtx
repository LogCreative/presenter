% \iffalse meta-comment
% ------------------------------------------------------------------------
% Copyright (C) 2023 Log Creative <logcreative@outlook.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Log Creative.
% ------------------------------------------------------------------------
% \fi
%
% \iffalse
%<*package>
\NeedsTeXFormat{LaTeX2e}[2020/10/01]
\ProvidesExplPackage
%<default>  {pretbg-default}
%<block>  {pretbg-block}
%<iiiblock>  {pretbg-iiiblock}
%<secblock>  {pretbg-secblock}
  {2023-07-03}{0.4.0}
%<default>  {default background style for presenter}
%<block>  {block background style for presenter}
%<iiiblock>  {iiiblock background style for presenter implemented in l3draw}
%<secblock>  {secblock background style based on block style}
%</package>
% \fi
%
% \iffalse
%<*package>
% \fi
%
% \section{Presenter Background Built-In Styles}
% \label{sec:pretbg}
%
% \begin{documentation}
% 
% \begin{TemplateDescription}{background/headline}{default}
% \TemplateKey{none}{---}{}{}
% \TemplateSemantics Default blank page.\\
% \previewtest{package}
%    \begin{macrocode}
%<*default>
\DeclareTemplateInterface { background / headline } { default } { 0 } { }
%</default>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/headline}{block,iiiblock}
% \TemplateKey{fill}{boolean}{if block is filled}{true}
% \TemplateKey{fill-color}{tokenlist}{fill color}{black!20}
% \TemplateKey{stroke}{boolean}{if there is a block underline}{false}
% \TemplateKey{stroke-color}{tokenlist}{stroke color}{black}
% \TemplateKey{stroke-linewidth}{length}{stroke linewidth}{1pt}
% \TemplateKey{stroke-length}{length}{stroke length}{\cs{paperwidth}}
% \TemplateSemantics blocked headline.\\
% \previewtest{block}
%    \begin{macrocode}
%<*block|iiiblock>
\DeclareTemplateInterface
  { background / headline }
%<block>  { block }
%<iiiblock>  { iiiblock }
  { 0 }
  {
    fill             : boolean   = true ,
    fill-color       : tokenlist = black!20 ,
    stroke           : boolean   = false ,
    stroke-color     : tokenlist = black ,
    stroke-linewidth : length    = 1pt ,
    stroke-length    : length    = \paperwidth
  }
%</block|iiiblock>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/headline}{secblock}
% \TemplateKey{from-color}{tokenlist}{background color at sectioning level 0
%   (chapter)}{black!39}
% \TemplateKey{color-decay}{integer}{color decay at each level, should in the
%    range of 0 to 100}{61}
% \TemplateKey{to-color}{tokenlist}{the target color to mix up with from-color}
%    {white}
% \TemplateSemantics blocked headline with color decay at each level.\\
% \previewtest[3]{secblock}\previewtest[4]{secblock}
%    \begin{macrocode}
%<*secblock>
\DeclareTemplateInterface { background / headline } { secblock } { 0 }
  {
    from-color  : tokenlist = black!39,
    color-decay : integer   = 61,
    to-color    : tokenlist = white
  }
%</secblock>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \end{documentation}
%
% \begin{implementation}
%
% \begin{texnote}
% For the same apperence there may be more than one implementations, like
% \pkg{block} and \pkg{iiiblock} here. When declaring the template interface, no 
% \LaTeX3 variable is involved. But when declaring the template implementation,
% the key value needs to be assigned to a given variable. Since declaring a new
% variable like \cs{tl_new:N} requires the variable is not declared before, and
% the \pkg{docstrip} is not smart enough to replace \texttt{@@} into the
% corresponding namespaces (\texttt{@@} will always affecting the contents below
% until the next \texttt{@@} declaration), all the implementation will be
% separated to avoid the re-declaration variable issue.
% \end{texnote}
%
% \paragraph{\pkg{default} style.}
%    \begin{macrocode}
%<@@=pretbg_default>
%<*default>
\DeclareTemplateCode { background / headline } { default } { 0 } { } { }
%</default>
%    \end{macrocode}
%
% \paragraph{\pkg{block} style.}
%    \begin{macrocode}
%<*block>
%<@@=pretbg_block>
\bool_new:N \l_@@_bg_headline_fill_bool
\tl_new:N \l_@@_bg_headline_fill_color_tl
\bool_new:N \l_@@_bg_headline_stroke_bool
\tl_new:N \l_@@_bg_headline_stroke_color_tl
\dim_new:N \l_@@_bg_headline_stroke_linewidth_dim
\dim_new:N \l_@@_bg_headline_stroke_length_dim
\dim_new:N \l_@@_height_dim
\DeclareTemplateCode { background / headline } { block } { 0 }
  {
    fill             = \l_@@_bg_headline_fill_bool ,
    fill-color       = \l_@@_bg_headline_fill_color_tl ,
    stroke           = \l_@@_bg_headline_stroke_bool ,
    stroke-color     = \l_@@_bg_headline_stroke_color_tl ,
    stroke-linewidth = \l_@@_bg_headline_stroke_linewidth_dim ,
    stroke-length    = \l_@@_bg_headline_stroke_length_dim
  }
  {
    \AssignTemplateKeys
    \dim_set_eq:NN \l_@@_height_dim
      { \dim_eval:n { 1 in + \voffset + \topmargin + \headheight + \headsep / 2 } }
    \bool_if:NT \l_@@_bg_headline_fill_bool 
      {
        \exp_args:NV \color_select:n \l_@@_bg_headline_fill_color_tl
        \linethickness { \dim_use:N \l_@@_height_dim }
        \put (0, \dim_eval:n { - \l_@@_height_dim / 2 } )
          { \line ( 1 , 0 ) { \paperwidth } }
      }
    \bool_if:NT \l_@@_bg_headline_stroke_bool
      {
        \exp_args:NV \color_select:n \l_@@_bg_headline_stroke_color_tl
        \linethickness { \dim_use:N \l_@@_bg_headline_stroke_linewidth_dim }
        \put (0, - \dim_use:N \l_@@_height_dim )
          { \line ( 1 , 0 ) { \dim_use:N \l_@@_bg_headline_stroke_length_dim } }
      }
  }
%</block>
%    \end{macrocode}
%
% \paragraph{\pkg{iiiblock} style.}
%    \begin{macrocode}
%<*iiiblock>
%<@@=pretbg_iiiblock>
\RequirePackage { l3draw }
\bool_new:N \l_@@_bg_headline_fill_bool
\tl_new:N \l_@@_bg_headline_fill_color_tl
\bool_new:N \l_@@_bg_headline_stroke_bool
\tl_new:N \l_@@_bg_headline_stroke_color_tl
\dim_new:N \l_@@_bg_headline_stroke_linewidth_dim
\dim_new:N \l_@@_bg_headline_stroke_length_dim
\dim_new:N \l_@@_height_dim
\DeclareTemplateCode { background / headline } { iiiblock } { 0 }
  {
    fill             = \l_@@_bg_headline_fill_bool ,
    fill-color       = \l_@@_bg_headline_fill_color_tl ,
    stroke           = \l_@@_bg_headline_stroke_bool ,
    stroke-color     = \l_@@_bg_headline_stroke_color_tl ,
    stroke-linewidth = \l_@@_bg_headline_stroke_linewidth_dim ,
    stroke-length    = \l_@@_bg_headline_stroke_length_dim
  }
  {
    \AssignTemplateKeys
    \dim_set_eq:NN \l_@@_height_dim
      { \dim_eval:n { 1 in + \voffset + \topmargin + \headheight + \headsep / 2 } }
    \put ( 0, - \dim_use:N \l_@@_height_dim )
      {
        \draw_begin:
        \bool_if:NT \l_@@_bg_headline_fill_bool
          {
            \draw_path_rectangle:nn
              { 0pt, 0pt }
              { \paperwidth, \l_@@_height_dim }
            \exp_args:NV \color_fill:n \l_@@_bg_headline_fill_color_tl
            \draw_path_use_clear:n { fill }
          }
        \bool_if:NT \l_@@_bg_headline_stroke_bool
          {
            \draw_linewidth:n { \l_@@_bg_headline_stroke_linewidth_dim }
            \draw_path_moveto:n { 0pt , 0pt }
            \draw_path_lineto:n { \l_@@_bg_headline_stroke_length_dim, 0pt }
            \exp_args:NV \color_select:n \l_@@_bg_headline_stroke_color_tl 
            \draw_path_use_clear:n { stroke }
          }
        \draw_end:
      }
  }
%</iiiblock>
%    \end{macrocode}
%
% \paragraph{\pkg{secblock} style.}
% This style is based on \pkg{pretbg-block} style.
% The background block fill color at sectioning level \meta{level} is
% \begin{equation*}
%   \meta{from-color} \texttt{!}
%   \texttt{ round}
%   \left( 100 \left(\frac{\meta{color-decay}}{100}\right)^{\meta{level}}\right) 
%   \texttt{!} \meta{to-color}
% \end{equation*}
% where \texttt{round()} will round the floating number to the closest integer
% by function \cs{fp_to_int:n}.
%
% For \meta{from-color}, a special case is required to be handled: the color
% expresion omits the second color to be mixed, e.g. \texttt{black!39}. As is
% in the implementation of \file{l3color.dtx}, the expression will be completed
% with \texttt{!white} automatically if it is used directly. But for the style
% \pkg{secblock} here, the processed color expression could be \texttt{black!39!80}
% without additional care, which will end up an error. Thus, the
% \meta{from-color} will be normalized first with the possible appendence of
% \texttt{!white}, which is not necessary for \meta{to-color} because it is
% the tail of the color expression.
%    \begin{macrocode}
%<*secblock>
%<@@=pretbg_secblock>
\RequirePackage { pretbg-block }
\tl_new:N \l_@@_bg_headline_from_color_tl
\int_new:N \l_@@_bg_headline_color_decay_int
\tl_new:N \l_@@_bg_headline_to_color_tl
\int_new:N \l_@@_cur_lv_int
\int_new:N \l_@@_color_pvt_int
\tl_new:N \l_@@_color_expr_tl
\DeclareTemplateCode { background / headline } { secblock } { 0 }
  {
    from-color  = \l_@@_bg_headline_from_color_tl   ,
    color-decay = \l_@@_bg_headline_color_decay_int ,
    to-color    = \l_@@_bg_headline_to_color_tl
  }
  {
    \AssignTemplateKeys
    \pretsec_get_cur_lv:N \l_@@_cur_lv_int
    \exp_args:NNx \int_set:Nn \l_@@_color_pvt_int
      {
        \fp_to_int:n
          {
            \l_@@_cur_lv_int < 0 ? 100 :
            ( \l_@@_bg_headline_color_decay_int / 100.0 ) 
              ** \l_@@_cur_lv_int * 100
          }
      }
    \exp_args:Nnx \regex_match:nnT { ! \d+ \z }
      { \l_@@_bg_headline_from_color_tl }
      { \tl_put_right:Nn \l_@@_bg_headline_from_color_tl { ! white } }
    \exp_args:NNx \tl_set:Nn \l_@@_color_expr_tl
      {
        \l_@@_bg_headline_from_color_tl !
        \int_use:N \l_@@_color_pvt_int !
        \l_@@_bg_headline_to_color_tl
      }
    \exp_args:Nnnx \UseTemplate { background / headline } { block }
      { fill-color = \l_@@_color_expr_tl }
  }
%</secblock>
%    \end{macrocode}
%
% \end{implementation}
%
% \iffalse
%</package>
% \fi
%
\endinput
