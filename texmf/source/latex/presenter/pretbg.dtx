% \iffalse meta-comment
% ------------------------------------------------------------------------
% Copyright (C) 2023 Log Creative <logcreative@outlook.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Log Creative.
% ------------------------------------------------------------------------
% \fi
%
% \iffalse
%<*package>
\NeedsTeXFormat{LaTeX2e}[2020/10/01]
\ProvidesExplPackage
%<default>  {pretbg-default}
%<block>  {pretbg-block}
%<iiiblock>  {pretbg-iiiblock}
%<secblock>  {pretbg-secblock}
%<progressbar>  {pretbg-progressbar}
%<img>  {pretbg-img}
  {2023-07-18}{0.6.0}
%<default>  {default background style for presenter}
%<block>  {block background style for presenter}
%<iiiblock>  {iiiblock background style for presenter implemented in l3draw}
%<secblock>  {secblock background style based on block style}
%<progressbar>  {progressbar background style based on block style}
%<img>  {img background style for presenter}
%</package>
% \fi
%
% \iffalse
%<*package>
% \fi
%
% \section{Presenter Background Built-In Styles}
% \label{sec:pretbg}
%
% \begin{documentation}
% 
% \begin{TemplateDescription}{background/canvas}{default}
% \TemplateKey{none}{---}{}{}
% \TemplateSemantics Default blank page background canvas.
%    \begin{macrocode}
%<*default>
\DeclareTemplateInterface { background / canvas } { default } { 0 } { }
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/headline}{default}
% \TemplateKey{none}{---}{}{}
% \TemplateSemantics Default blank headline background.\\
% \previewtest{package}
%    \begin{macrocode}
\DeclareTemplateInterface { background / headline } { default } { 0 } { }
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/footline}{default}
% \TemplateKey{none}{---}{}{}
% \TemplateSemantics Default blank footline background.
%    \begin{macrocode}
\DeclareTemplateInterface { background / footline } { default } { 0 } { }
%</default>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/headline}{block,iiiblock}
% \TemplateKey{fill}{boolean}{if block is filled}{true}
% \TemplateKey{fill-color}{tokenlist}{fill color}{black!20}
% \TemplateKey{stroke}{boolean}{if there is a block underline}{false}
% \TemplateKey{stroke-color}{tokenlist}{stroke color}{black}
% \TemplateKey{stroke-linewidth}{length}{stroke linewidth}{1pt}
% \TemplateKey{stroke-length}{length}{stroke length}{\cs{paperwidth}}
% \TemplateSemantics blocked headline.\\
% \previewtest{block}
%    \begin{macrocode}
%<*block|iiiblock>
\DeclareTemplateInterface
  { background / headline }
%<block>  { block }
%<iiiblock>  { iiiblock }
  { 0 }
  {
    fill             : boolean   = true ,
    fill-color       : tokenlist = black!20 ,
    stroke           : boolean   = false ,
    stroke-color     : tokenlist = black ,
    stroke-linewidth : length    = 1pt ,
    stroke-length    : length    = \paperwidth
  }
%</block|iiiblock>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/headline}{secblock}
% \TemplateKey{from-color}{tokenlist}{background color at sectioning level 0
%   (chapter)}{black!39}
% \TemplateKey{color-decay}{integer}{color decay at each level, should in the
%    range of 0 to 100}{61}
% \TemplateKey{to-color}{tokenlist}{the target color to mix up with from-color}
%    {white}
% \TemplateSemantics blocked headline with color decay at each level.\\
% \previewtest[page=3]{secblock}\previewtest[page=4]{secblock}
%    \begin{macrocode}
%<*secblock>
\DeclareTemplateInterface { background / headline } { secblock } { 0 }
  {
    from-color  : tokenlist = black!39,
    color-decay : integer   = 61,
    to-color    : tokenlist = white
  }
%</secblock>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/headline}{progressbar}
% \label{tpl:pretbg-progressbar-headline}
% \TemplateKey{stroke}{boolean}{whether headline progressbar is enabled}{true}
% \TemplateKey{stroke-color}{tokenlist}{stroke color of the progressbar}{black}
% \TemplateKey{stroke-linewidth}{length}{stroke linewidth of the progressbar}{1pt}
% \TemplateSemantics A progressbar style to indicate the page progress compared
% with the total page number, which requires two \TeX{} runs to make the output
% correct. If only one run is processed, the progress will always be 100\%.\\
% \previewtest[page=3]{progressbar}
%    \begin{macrocode}
%<*progressbar>
\DeclareTemplateInterface { background / headline } { progressbar } { 0 }
  {
    stroke           : boolean   = true ,
    stroke-color     : tokenlist = black ,
    stroke-linewidth : length    = 1pt
  }
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/footline}{progressbar}
% \label{tpl:pretbg-progressbar-footline}
% \TemplateKey{stroke}{boolean}{whether footline progressbar is enabled}{false}
% \TemplateKey{stroke-color}{tokenlist}{stroke color of the progressbar}{black}
% \TemplateKey{stroke-linewidth}{length}{stroke linewidth of the progressbar}{2pt}
% \TemplateSemantics Similar to \texttt{background/headline/progressbar} in
% Section \ref{tpl:pretbg-progressbar-headline}, but in the bottom of the
% footline (or the page). The default value for \meta{stroke-linewidth} is
% increased to 2pt to make it a little more noticeable. The footline progressbar
% is initially disabled since the headline progressbar is initially enabled.\\
% \previewtest[page=5]{progressbar}
%    \begin{macrocode}
\DeclareTemplateInterface { background / footline } { progressbar } { 0 }
  {
    stroke           : boolean   = false ,
    stroke-color     : tokenlist = black ,
    stroke-linewidth : length    = 2pt
  }
%</progressbar>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \begin{TemplateDescription}{background/canvas}{img}\label{tpl:pretbg-img}
% \TemplateKey{img}{tokenlist}{image insertion control sequences}{}
% \TemplateKey{pos}{choice}{one of center position \texttt{center}, or corner
%   position \texttt{top-left}, \texttt{top-right}, \texttt{bottom-left},
%   \texttt{bottom-right}}{center}
% \TemplateKey{margin-x}{length}{image margin in horizontal direction}{0cm}
% \TemplateKey{margin-y}{length}{image margin in vertical direction}{0cm}
% \TemplateSemantics The \meta{img} will be placed in the center or in the
% corner of the background. It is encouraged to use a picture with low opacity
% when it is in the center of the page or a small logo when it is in the corner.
% Be aware it is in the horizontal mode where newline \verb"\\" should be
% avoided.
%
% You could manually pin-point the position where the \meta{img} is by assigning
% values to \meta{margin-x} and \meta{margin-y}. For the traditional adjustment
% method, after assigning \meta{pos} as \texttt{top-left}, \meta{margin-x} and
% \meta{margin-y} will be the natural coordinates relative to the top-left
% corner of the background.\\
% \previewtest[page=1]{img}\previewtest[page=2]{img}
%    \begin{macrocode}
%<*img>
\DeclareTemplateInterface { background / canvas } { img } { 0 }
  {
    img      : tokenlist = ,
    pos      : choice
      { center, top-left, top-right, bottom-left, bottom-right } = center ,
    margin-x : length = 0cm ,
    margin-y : length = 0cm
  }
%</img>
%    \end{macrocode}
% \end{TemplateDescription}
%
% \end{documentation}
%
% \begin{implementation}
%
% \subsection{Implementation Code}
%
% \begin{texnote}
% For the same apperence there may be more than one implementations, like
% \pkg{block} and \pkg{iiiblock} here. When declaring the template interface, no 
% \LaTeX3 variable is involved. But when declaring the template implementation,
% the key value needs to be assigned to a given variable. Since declaring a new
% variable like \cs{tl_new:N} requires the variable is not declared before, and
% the \pkg{docstrip} is not smart enough to replace \texttt{@@} into the
% corresponding namespaces (\texttt{@@} will always affecting the contents below
% until the next \texttt{@@} declaration), all the implementation will be
% separated to avoid the re-declaration variable issue.
% \end{texnote}
%
% \begin{macro}[int]{background/canvas/default,
%   background/headline/default,
%   background/footline/default}
% \textbf{\pkg{default} background style.}
%    \begin{macrocode}
%<@@=pretbg_default>
%<*default>
\DeclareTemplateCode { background / canvas } { default } { 0 } { } { }
\DeclareTemplateCode { background / headline } { default } { 0 } { } { }
\DeclareTemplateCode { background / footline } { default } { 0 } { } { }
%</default>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{background/headline/block}
% \textbf{\pkg{block} background style.}
% \begin{texnote}
% A typical \presenter{} page layout could be as follows, which is generated by
% package \pkg{layout}:\\
% \previewtest[page=1, trim=1.75cm 2cm 4.5cm 1.5cm, clip]{layout}
% \previewtest[page=2, trim=2cm 2cm 4.25cm 1.5cm, clip]{layout}\\
% The height of the headline is calculated as \cs{l_@@_height_dim}, where
% \cs{headsep} is split in half to make sure there is some distance between the
% block and the text area:
% \begin{equation*}
%   \meta{block height} = \text{1 in} + \cs{voffset} + \cs{topmargin}
%                         + \cs{headheight} + \frac{\cs{headsep}}{2} 
% \end{equation*}
% \presenter{} does not provide a unified interface for calculating the height
% since every dimen in this variable could be modified among different pages by 
% packages like \pkg{geometry}, and describing such height as a variable gives
% an illusion that the variable is a less cost one which is not true since it
% needs some dimen calculation to get the correct result. The code is written in
% this way to avoid frequent calculation and encourage the developer to only
% calculate and save the result once per page.
%
% It is not recommended to use a block style in the footline, since the
% information in the footline is typically not important and the top position
% and the height of the footline is not so easy to calculate:
% \begin{align*}
%   \meta{footline top} = &\,\text{1 in} + \cs{voffset} + \cs{topmargin} +
%                          \cs{headheight} + \cs{headsep} \\
%                         &+ \cs{textheight} + \frac{\cs{footskip}}{2} -
%                          \frac{\cs{baselineskip}}{2} \\
%   \meta{footline height} =&\,\cs{paperheight} - \meta{footline top}
% \end{align*}
% What's more, there may be footnotes in the position, which could mess up the
% layout. That's why \texttt{background/footline/progress} template in Section
% \ref{tpl:pretbg-progressbar-footline} uses the bottom of the page to place
% the progressbar.
% \end{texnote}
%    \begin{macrocode}
%<*block>
%<@@=pretbg_block>
\bool_new:N \l_@@_headline_fill_bool
\tl_new:N \l_@@_headline_fill_color_tl
\bool_new:N \l_@@_headline_stroke_bool
\tl_new:N \l_@@_headline_stroke_color_tl
\dim_new:N \l_@@_headline_stroke_linewidth_dim
\dim_new:N \l_@@_headline_stroke_length_dim
\dim_new:N \l_@@_height_dim
\DeclareTemplateCode { background / headline } { block } { 0 }
  {
    fill             = \l_@@_headline_fill_bool ,
    fill-color       = \l_@@_headline_fill_color_tl ,
    stroke           = \l_@@_headline_stroke_bool ,
    stroke-color     = \l_@@_headline_stroke_color_tl ,
    stroke-linewidth = \l_@@_headline_stroke_linewidth_dim ,
    stroke-length    = \l_@@_headline_stroke_length_dim
  }
  {
    \AssignTemplateKeys
    \dim_set:Nn \l_@@_height_dim
      { \dim_eval:n { 1 in + \voffset + \topmargin + \headheight + \headsep / 2 } }
    \color_group_begin:
    \bool_if:NT \l_@@_headline_fill_bool 
      {
        \exp_args:NV \color_select:n \l_@@_headline_fill_color_tl
        \linethickness { \dim_use:N \l_@@_height_dim }
        \put ( 0 , \dim_eval:n { - \l_@@_height_dim / 2 } )
          { \line ( 1 , 0 ) { \paperwidth } }
      }
    \bool_if:NT \l_@@_headline_stroke_bool
      {
        \exp_args:NV \color_select:n \l_@@_headline_stroke_color_tl
        \linethickness { \dim_use:N \l_@@_headline_stroke_linewidth_dim }
        \put ( 0 , - \dim_use:N \l_@@_height_dim )
          { \line ( 1 , 0 ) { \dim_use:N \l_@@_headline_stroke_length_dim } }
      }
    \color_group_end:
  }
%</block>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{background/headline/iiiblock}
% \textbf{\pkg{iiiblock} background style.}
%    \begin{macrocode}
%<*iiiblock>
%<@@=pretbg_iiiblock>
\RequirePackage { l3draw }
\bool_new:N \l_@@_headline_fill_bool
\tl_new:N \l_@@_headline_fill_color_tl
\bool_new:N \l_@@_headline_stroke_bool
\tl_new:N \l_@@_headline_stroke_color_tl
\dim_new:N \l_@@_headline_stroke_linewidth_dim
\dim_new:N \l_@@_headline_stroke_length_dim
\dim_new:N \l_@@_height_dim
\DeclareTemplateCode { background / headline } { iiiblock } { 0 }
  {
    fill             = \l_@@_headline_fill_bool ,
    fill-color       = \l_@@_headline_fill_color_tl ,
    stroke           = \l_@@_headline_stroke_bool ,
    stroke-color     = \l_@@_headline_stroke_color_tl ,
    stroke-linewidth = \l_@@_headline_stroke_linewidth_dim ,
    stroke-length    = \l_@@_headline_stroke_length_dim
  }
  {
    \AssignTemplateKeys
    \dim_set:Nn \l_@@_height_dim
      { \dim_eval:n { 1 in + \voffset + \topmargin + \headheight + \headsep / 2 } }
    \put ( 0 , - \dim_use:N \l_@@_height_dim )
      {
        \draw_begin:
        \bool_if:NT \l_@@_headline_fill_bool
          {
            \draw_path_rectangle:nn
              { 0pt, 0pt }
              { \paperwidth, \l_@@_height_dim }
            \exp_args:NV \color_fill:n \l_@@_headline_fill_color_tl
            \draw_path_use_clear:n { fill }
          }
        \bool_if:NT \l_@@_headline_stroke_bool
          {
            \draw_linewidth:n { \l_@@_headline_stroke_linewidth_dim }
            \draw_path_moveto:n { 0pt , 0pt }
            \draw_path_lineto:n { \l_@@_headline_stroke_length_dim, 0pt }
            \exp_args:NV \color_select:n \l_@@_headline_stroke_color_tl 
            \draw_path_use_clear:n { stroke }
          }
        \draw_end:
      }
  }
%</iiiblock>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{background/headline/secblock}
% \textbf{\pkg{secblock} background style.}
% This style is based on \pkg{pretbg-block} style.
% The background block fill color at sectioning level \meta{level} is
% \begin{equation*}
%   \meta{from-color} \texttt{!}
%   \texttt{ round}
%   \left( 100 \left(\frac{\meta{color-decay}}{100}\right)^{\meta{level}}\right) 
%   \texttt{!} \meta{to-color}
% \end{equation*}
% where \texttt{round()} will round the floating number to the closest integer
% by function \cs{fp_to_int:n}.
%
% For \meta{from-color}, a special case is required to be handled: the color
% expresion omits the second color to be mixed, e.g. \texttt{black!39}. As is
% in the implementation of \file{l3color.dtx}, the expression will be completed
% with \texttt{!white} automatically if it is used directly. But for the style
% \pkg{secblock} here, the processed color expression could be \texttt{black!39!61}
% without additional care, which will end up an error. Thus, the
% \meta{from-color} will be normalized first with the possible appendence of
% \texttt{!white}, which is not necessary for \meta{to-color} because it is
% the tail of the color expression.
%
% \begin{texnote}
% The color expression implemented in \file{l3color.dtx} uses the argument
% detection loop to split the expression by \texttt{!} (see
% \cs{\__color_parse_loop:w} in \file{l3color.dtx}), which will not expand the
% \LaTeX3 variables in the argument automatically. When assigning template
% values for the color key, \cs{exp_args} is required to instantialize the
% variable for further parsing.
% \end{texnote}
%    \begin{macrocode}
%<*secblock>
%<@@=pretbg_secblock>
\RequirePackage { pretsec }
\RequirePackage { pretbg-block }
\tl_new:N \l_@@_headline_from_color_tl
\int_new:N \l_@@_headline_color_decay_int
\tl_new:N \l_@@_headline_to_color_tl
\int_new:N \l_@@_cur_lv_int
\int_new:N \l_@@_color_pvt_int
\tl_new:N \l_@@_color_expr_tl
\DeclareTemplateCode { background / headline } { secblock } { 0 }
  {
    from-color  = \l_@@_headline_from_color_tl   ,
    color-decay = \l_@@_headline_color_decay_int ,
    to-color    = \l_@@_headline_to_color_tl
  }
  {
    \AssignTemplateKeys
    \pretsec_get_cur_lv:N \l_@@_cur_lv_int
    \exp_args:NNx \int_set:Nn \l_@@_color_pvt_int
      {
        \fp_to_int:n
          {
            \l_@@_cur_lv_int < 0 ? 100 :
            ( \l_@@_headline_color_decay_int / 100.0 ) 
              ** \l_@@_cur_lv_int * 100
          }
      }
    \exp_args:Nnx \regex_match:nnT { ! \d+ \z }
      { \l_@@_headline_from_color_tl }
      { \tl_put_right:Nn \l_@@_headline_from_color_tl { ! white } }
    \exp_args:NNx \tl_set:Nn \l_@@_color_expr_tl
      {
        \l_@@_headline_from_color_tl !
        \int_use:N \l_@@_color_pvt_int !
        \l_@@_headline_to_color_tl
      }
    \exp_args:Nnnx \UseTemplate { background / headline } { block }
      { fill-color = \l_@@_color_expr_tl }
  }
%</secblock>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{
%   \pretbg_progressbar_get_progress:N,
%   background/headline/progressbar,
%   background/footline/progressbar}
% \textbf{\pkg{progressbar} background style.}
% A common function \cs{pretbg_progressbar_get_progress:N} is defined to
% calculate the progress. The progress is calculated by
% \begin{equation*}
%   \meta{progress} = \frac{\cs{thepage}}{\cs{PreviousTotalPages}}
% \end{equation*}
% where \cs{PreviousTotalPages} defined in \file{ltshipout.dtx} requires two
% \TeX{} runs to get the correct output from the aux file.
%    \begin{macrocode}
%<*progressbar>
%<@@=pretbg_progressbar>
\cs_new:Npn \pretbg_progressbar_get_progress:N #1
  {
    \int_compare:nNnTF { \PreviousTotalPages } = { 0 }
      { \fp_set:Nn #1 { 1.0 } }
      { \fp_set:Nn #1 { \thepage / \PreviousTotalPages } }
  }
%    \end{macrocode}
% Common variables \cs{l_@@_progress_fp} and \cs{l_@@_stroke_length_dim} are
% used to store the progress and the stroke length respectively.
% (There is only one progress in the same page.)
%    \begin{macrocode}
\fp_new:N \l_@@_progress_fp
\dim_new:N \l_@@_stroke_length_dim
%    \end{macrocode}
% \texttt{background/headline/progressbar} is based on \pkg{pretbg-block} style
% to reuse the calculation of the vertical position of the bottom of headline,
% where the fill is set to false and only stroke is enabled. It uses
% \meta{stroke-length} to indicate the progress.
%    \begin{macrocode}
\bool_new:N \l_@@_headline_stroke_bool
\tl_new:N \l_@@_headline_stroke_color_tl
\dim_new:N \l_@@_headline_stroke_linewidth_dim
\RequirePackage { pretbg-block }
\DeclareTemplateCode { background / headline } { progressbar } { 0 }
  {
    stroke           = \l_@@_headline_stroke_bool          ,
    stroke-color     = \l_@@_headline_stroke_color_tl      ,
    stroke-linewidth = \l_@@_headline_stroke_linewidth_dim
  }
  {
    \AssignTemplateKeys
    \bool_if:NT \l_@@_headline_stroke_bool
      {
        \pretbg_progressbar_get_progress:N \l_@@_progress_fp
        \dim_set:Nn \l_@@_stroke_length_dim 
          { \fp_use:N \l_@@_progress_fp \paperwidth }
        \exp_args:Nnnx \UseTemplate { background / headline } { block }
          {
            fill             = false ,
            stroke           = true ,
            stroke-color     = \l_@@_headline_stroke_color_tl ,
            stroke-linewidth = \l_@@_headline_stroke_linewidth_dim ,
            stroke-length    = \l_@@_stroke_length_dim
          }
      }
  }
%    \end{macrocode}
% \texttt{background/footline/progressbar} uses the bottom of the page as the
% vertical position, since there may be footnotes in the bottom of the body and
% it is not suitable to add a progress bar at the position.
%    \begin{macrocode}
\bool_new:N \l_@@_footline_stroke_bool
\tl_new:N \l_@@_footline_stroke_color_tl
\dim_new:N \l_@@_footline_stroke_linewidth_dim
\DeclareTemplateCode { background / footline } { progressbar } { 0 }
  {
    stroke           = \l_@@_footline_stroke_bool          ,
    stroke-color     = \l_@@_footline_stroke_color_tl      ,
    stroke-linewidth = \l_@@_footline_stroke_linewidth_dim
  }
  {
    \AssignTemplateKeys
    \bool_if:NT \l_@@_footline_stroke_bool
      {
        \pretbg_progressbar_get_progress:N \l_@@_progress_fp
        \dim_set:Nn \l_@@_stroke_length_dim 
          { \fp_use:N \l_@@_progress_fp \paperwidth }
        \color_group_begin:
        \exp_args:NV \color_select:n \l_@@_footline_stroke_color_tl
        \linethickness { \dim_use:N \l_@@_footline_stroke_linewidth_dim }
        \put (
          0 ,
          - \dim_eval:n
            { \paperheight - \l_@@_footline_stroke_linewidth_dim / 2 }
          )
          { \line ( 1 , 0 ) { \dim_use:N \l_@@_stroke_length_dim } }
        \color_group_end:
      }
  }
%</progressbar>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{background/canvas/img}
% \textbf{\pkg{img} background style.}
% The anchor point of the image is in the bottom-left of the object. This style
% is not designed as indicating x-pos and y-pos directly for three reasons:
% \begin{itemize}
%   \item The original coordinate system inside \verb"shipout/background" is not
%         straight forward: the origin is in the top-left, and the y coordinate
%         is usually negative as the canvas can be regarded as the fourth
%         quadrant.
%   \item The anchor point of the box is not in the top-left corner, which will
%         mess around the judgement of the y coordinate.
%   \item Given choices on which corner as the reference will make the
%         adjustment easier, as it is not in the what you see is what you get
%         interface where user could drag the component to the desired visual
%         position. And this also fits the widely-accepted container concept.
% \end{itemize}
%
% The calculation on the corner will consider the margin, but not for the
% centering position since the margin is symmetrical and as if the margin does
% not exist. The calculation of the corner cases is straightforward, but for the
% center position it needs some deduction:
% Assume \tn{paperwidth} is $W$, \tn{paperheight} is $H$, the width of the
% image box is $w$, the height is $h$. Then to make the image box centered in
% the page, the bottom-left coordinate $(x,y)$ of the image box is:
% \begin{equation*}
%   \begin{cases}
%     2x+w      = W \\
%     2(-y-h)+h = H
%   \end{cases} \Rightarrow
%   \begin{cases}
%     x = \frac{W-w}{2} \\
%     y = \frac{H+h}{-2}
%   \end{cases}
% \end{equation*}
%
% \begin{texnote}
% It seems that \cs{dim_eval:n} does not support braces (\verb"(" and \verb")")
% well. \tn{vbox} can have a box width of the \tn{textwidth}, so an \tn{hbox} is
% used instead but be aware to change to the vertical mode if you want to insert
% a newline.
%
% As for repeated images, the compiler(s) will only load once and make
% reference to the object for the second use, so no need to worry about the
% extra space which may be made from this operation. You could see such in the
% \file{img.tlg} where there is only one \verb"File" line for reading the
% graphic file \file{example-image-1x1.pdf}.
% \end{texnote}
%    \begin{macrocode}
%<*img>
%<@@=pretbg_img>
\tl_new:N \l_@@_canvas_img_tl
\dim_new:N \l_@@_canvas_margin_x_dim
\dim_new:N \l_@@_canvas_margin_y_dim
\tl_new:N \l_@@_x_pos_expr_tl
\tl_new:N \l_@@_y_pos_expr_tl
\box_new:N \l_@@_img_box
\DeclareTemplateCode { background / canvas } { img } { 0 }
  {
    img      = \l_@@_canvas_img_tl ,
    margin-x = \l_@@_canvas_margin_x_dim ,
    margin-y = \l_@@_canvas_margin_y_dim ,
    pos      =
      {
        center       = 
          {
            \tl_set:Nn \l_@@_x_pos_expr_tl
              { \paperwidth / 2 - \box_wd:N \l_@@_img_box / 2 }
            \tl_set:Nn \l_@@_y_pos_expr_tl
              { - \paperheight / 2 - \box_ht:N \l_@@_img_box / 2 }
          },
        top-left     =
          {
            \tl_set:Nn \l_@@_x_pos_expr_tl
              { \l_@@_canvas_margin_x_dim }
            \tl_set:Nn \l_@@_y_pos_expr_tl
              { - \box_ht:N \l_@@_img_box - \l_@@_canvas_margin_y_dim }
          },
        top-right    =
          {
            \tl_set:Nn \l_@@_x_pos_expr_tl
              {
                \paperwidth - \box_wd:N \l_@@_img_box
                  - \l_@@_canvas_margin_x_dim
              }
            \tl_set:Nn \l_@@_y_pos_expr_tl
              { - \box_ht:N \l_@@_img_box - \l_@@_canvas_margin_y_dim }
          },
        bottom-left  = 
          {
            \tl_set:Nn \l_@@_x_pos_expr_tl
              { \l_@@_canvas_margin_x_dim }
            \tl_set:Nn \l_@@_y_pos_expr_tl
              { - \paperheight + \l_@@_canvas_margin_y_dim }
          },
        bottom-right =
          {
            \tl_set:Nn \l_@@_x_pos_expr_tl
              {
                \paperwidth - \box_wd:N \l_@@_img_box
                  - \l_@@_canvas_margin_x_dim
              }
            \tl_set:Nn \l_@@_y_pos_expr_tl
              { - \paperheight + \l_@@_canvas_margin_y_dim }
          }
      }
  }
  {
    \AssignTemplateKeys
    \hbox_set:Nn \l_@@_img_box { \l_@@_canvas_img_tl }
    \put ( \dim_eval:n { \l_@@_x_pos_expr_tl } ,
      \dim_eval:n { \l_@@_y_pos_expr_tl } )
      { \box_use:N \l_@@_img_box }
  }
%</img>
%    \end{macrocode}
% \end{macro}
%
% \end{implementation}
%
% \iffalse
%</package>
% \fi
%
\endinput
